#include<iostream>
#include<string>
#define maxsize 10
using  namespace std;


struct Graph {
	int vexnum;  //顶点个数
	int edge;   //边的条数
	int ** arc; //邻接矩阵
	string *information; //记录每个顶点名称
};

//创建图
void createGraph(Graph & g) {
	cout << "请输入顶点数：输入边的条数" << endl;
	cin >> g.vexnum;
	cin >> g.edge;  //输入边的条数

	g.information = new string[g.vexnum];
	g.arc = new int*[g.vexnum];
	int i = 0;

	//开辟空间的同时，进行名称的初始化
	for (i = 0; i < g.vexnum; i++) {
		g.arc[i] = new int[g.vexnum];
		g.information[i] = "v" + std::to_string(i + 1);//对每个顶点进行命名
		for (int k = 0; k < g.vexnum; k++) {
			g.arc[i][k] = INT_MAX;          //初始化我们的邻接矩阵
		}
	}

	cout << "请输入每条边之间的顶点编号(顶点编号从1开始),以及该边的权重：" << endl;
	for (i = 0; i < g.edge; i++) {
		int start;
		int end;
		cin >> start;   //输入每条边的起点
		cin >> end;     //输入每条边的终点
		int weight;
		cin >> weight;
		g.arc[start - 1][end - 1] = weight;//无向图的边是相反的
		//g.arc[end - 1][start - 1] = weight;
	}
}

//打印图
void print(Graph g) {
	int i;
	for (i = 0; i < g.vexnum; i++) {
		//cout << g.information[i] << " ";
		for (int j = 0; j < g.vexnum; j++) {
			if (g.arc[i][j] == INT_MAX)
				cout << "∞" << " ";
			else
				cout << g.arc[i][j] << " ";
		}
		cout << endl;
	}
}



void Dijkstra(int n, int v, int dist[], int pre[], Graph g){
	bool s[maxsize];
	   for (int i = 0; i <= n; i++){
		  dist[i] = g.arc[v][i];
		  s[i] = false;
		  if (dist[i] == INT_MAX) pre[i] = 0;
		  else pre[i] = v;
	   }
		dist[v] = 0;
		s[v] = 1;
	   for (int i = 1; i < n; i++){
			int temp = INT_MAX;
			int u = v;
			for (int j = 0; j < n; j++){
				if (!s[j] && dist[j] < temp)
				{
					u = j;
					temp = dist[j];
				}
			}
			s[u] = 1;
			for (int j = 0; j < n; j++){
				if (!s[j] && g.arc[u][j] < INT_MAX){
					int newdist = dist[u] + g.arc[u][j];
					if (newdist < dist[j]){
						dist[j] = newdist;
						pre[j] = u;
					}
				}
			}
		}
	//输出
	for (int i = 0; i < g.vexnum;i++){
		if (i != v){
			cout << v + 1 << "到" << i + 1 << "最短距离是：" << dist[i] << "，路径是：" << i+1;
			int t = pre[i];
			while ( t!= v)
			{
				cout << "--" << t + 1;
				t = pre[t];
			}
			cout << "--" << v +1<< endl;
		}
	}
}



int main()
{
	Graph g;
	int dist[maxsize],pre[maxsize];
	createGraph(g);
	print(g);
	int a;
	cout << " 输入开始的点" << endl;
	cin >> a;
	Dijkstra(g.vexnum,a,dist,pre,g);
	system("pause");
	return 0;
}